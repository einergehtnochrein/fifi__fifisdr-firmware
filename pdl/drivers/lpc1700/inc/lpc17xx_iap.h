/* Copyright (c) 2012, NXP Semiconductors
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list
 * of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice, this list
 * of conditions and the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 * Neither the name of the author nor the names of its contributors may be used
 * to endorse or promote products derived from this software without specific
 * prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/** \file
 *  \brief FLASH/EEPROM driver interface.
 *  This file defines all interface objects needed to use the FLASH/EEPROM driver.
 *
 *  \author NXP Semiconductors
 */


#ifndef __LPC17XX_IAP_H__
#define __LPC17XX_IAP_H__

/** \defgroup IAP
 *  \ingroup API
 *  @{
 */

#include "lpc17xx_libconfig.h"

#include "lpclib_types.h"


/** \defgroup IAP_Public_Types IAP Types, enums, macros
 *  @{
 */


#if LPCLIB_FAMILY == LPCLIB_FAMILY_LPC178X
/** Handle for the EEPROM. */
typedef struct EEPROM_Context *EEPROM_Handle;

/** Events generated by EEPROM driver. */
typedef enum EEPROM_CallbackEvent {
    EEPROM_EVENT_SUCCESS = 0,               /**< Read/write operation completed. */
    EEPROM_EVENT_BUSY,                      /**< The EEPROM is busy, and could not complete the request. */
} EEPROM_CallbackEvent;
#endif

/** @} IAP Types, enums, macros */



/** \defgroup IAP_Public_Functions IAP API Functions
 *  @{
 */


#if LPCLIB_FAMILY == LPCLIB_FAMILY_LPC178X
/** Open the EEPROM.
 *
 *  \param[out] pHandle Handle to be used in future API calls.
 *  \retval LPCLIB_SUCCESS Success. \ref handle contains a valid handle.
 */
LPCLIB_Result EEPROM_open (EEPROM_Handle *pHandle);


/** Close the EEPROM.
 *
 *  \param[out] pHandle Handle.
 *  \retval LPCLIB_SUCCESS Success.
 *  \retval LPCLIB_ILLEGAL_PARAMETER Handle is invalid.
 */
LPCLIB_Result EEPROM_close (EEPROM_Handle *pHandle);


/** Write one word to the EEPROM.
 *
 *  \param[in] handle EEPROM handle
 *  \param[in] destOffset Destination offset in EEPROM (must be on word boundary)
 *  \param[in] value Word to be written
 *  \param[in] callback If NULL, the function is synchronous (blocking)
 *  \retval LPCLIB_SUCCESS ok
 *  \retval LPCLIB_PENDING
 *  \retval LPCLIB_ILLEGAL_PARAMETER
 */
LPCLIB_Result EEPROM_write32 (EEPROM_Handle handle, uint32_t destOffset, uint32_t value, LPCLIB_Callback callback);


/** Read one word from EEPROM.
 *
 *  \param[in] handle EEPROM handle
 *  \param[in] offset Offset in EEPROM (must be on word boundary)
 *  \param[in] pValue Data pointer
 *  \param[in] callback If NULL, the function is synchronous (blocking)
 *  \retval LPCLIB_SUCCESS ok
 *  \retval LPCLIB_PENDING
 *  \retval LPCLIB_ILLEGAL_PARAMETER
 */
LPCLIB_Result EEPROM_read32 (EEPROM_Handle handle, uint32_t offset, uint32_t *pValue, LPCLIB_Callback callback);
#endif


/** Read device ID.
 */
LPCLIB_Result IAP_readDeviceId (uint32_t *pId);


/** Read boot code version.
 */
LPCLIB_Result IAP_readBootCodeVersion (uint8_t *pMajor, uint8_t *pMinor);

/** @} IAP API Functions */

/** @} IAP */

#endif /* #ifndef __LPC17XX_IAP_H__ */

