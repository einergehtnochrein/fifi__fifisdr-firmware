/* Copyright (c) 2012, NXP Semiconductors
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list
 * of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice, this list
 * of conditions and the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 * Neither the name of the author nor the names of its contributors may be used
 * to endorse or promote products derived from this software without specific
 * prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */


/** \file
 *  \brief RTC driver interface.
 *  This file defines all interface objects needed to use the RTC driver.
 *
 *  \author NXP Semiconductors
 */

#ifndef __LPC17XX_RTC_H__
#define __LPC17XX_RTC_H__

/** \defgroup RTC
 *  \ingroup API
 *  @{
 */


#include "lpc17xx_libconfig.h"
#include "lpclib_types.h"


/** \defgroup RTC_Public_Types RTC Types, enums, macros
 *  @{
 */


typedef enum RTC_Name {
    RTC0 = 0,                               /**< The one and only RTC */
} RTC_Name;


/** Handle for an RTC block */
typedef struct RTC_Context *RTC_Handle;


/** Opcodes to specify the configuration command in a call to \ref RTC_ioctl. */
typedef enum RTC_Opcode {
    RTC_OPCODE_INVALID = 0,                 /**< (List terminator) */
    RTC_OPCODE_SET_CALLBACK,                /**< Set callback handler */
} RTC_Opcode;



/** Callback configuration. */
struct RTC_ConfigCallback {
    LPCLIB_Callback callback;               /**< New callback handler */
    LPCLIB_Callback *pOldCallback;          /**< Takes previously installed callback handler */
};

    
/** Descriptor to specify the configuration in a call to \ref RTC_Ioctl. */
typedef struct RTC_Config {
    RTC_Opcode opcode;                      /**< Config action opcode */

    union {
        struct RTC_ConfigCallback callback; /**< Callback handler */
    };
} RTC_Config;

/** Config list terminator. */
#define RTC_CONFIG_END \
    {.opcode = RTC_OPCODE_INVALID}


/** Time format "time_t" (C library) */
typedef uint32_t RTC_TimeT;

    
/** Time format: Time of day */
typedef struct RTC_TimeOfDay {
    uint8_t sec;
    uint8_t min;
    uint8_t hour;
} RTC_TimeOfDay;


/** Time format: Date */
typedef struct RTC_Date {
    uint8_t dom;
    uint8_t mon;
    uint16_t year;
} RTC_Date;

    
/** Time format "struct tm" (C library) */
struct RTC_TimeStructTm {
    int tm_sec;                             /**< Seconds (0...61)! */
    int tm_min;                             /**< Minutes (0...59) */
    int tm_hour;                            /**< Hours (0...23) */
    int tm_mday;                            /**< Day of month (1...31) */
    int tm_mon;                             /**< Month (0...11) */
    int tm_year;                            /**< Years since 1990 (signed value!) */
    int tm_wday;                            /**< Day of week (0...6) */
    int tm_yday;                            /**< Day of year (0...365) */
    int tm_isdst;                           /**< Daylight savings flag */
};


/** Event types generated by RTC driver. */
typedef enum RTC_CallbackEvent {
    RTC_EVENT_UPDATE,                       /**< New real time value available */
    RTC_EVENT_ALARM,                        /**< Alarm */
    RTC_EVENT_FAILURE,                      /**< Battery/crystal failure */
} RTC_CallbackEvent;


/** @} RTC Types, enums, macros */

/** \defgroup RTC_Public_Functions RTC API Functions
 *  @{
 */


/** Prepare the use of the RTC block.
 */
LPCLIB_Result RTC_open (RTC_Name name, RTC_Handle *pHandle);


/** Close the RTC interface.
 *
 *  \param[in] pHandle Device handle
 */
void RTC_close (RTC_Handle *pHandle);


/** Set RTC options.
 *
 *  \param[in] pConfig Config descriptor
 */
void RTC_ioctl (RTC_Handle handle, const RTC_Config *pConfig);


/** Read time in "time_t" format.
 *
 *  The result is valid from year 2001 onwards...
 *
 *  \param[in] handle Device handle.
 *  \param[out] pTime Pointer to time_t variable (or NULL).
 *  \return Time in time_t format (or zero if RTC cannot be read).
 */
RTC_TimeT RTC_readTimeT (RTC_Handle handle, RTC_TimeT *pTime);


/** Read time in "struct tm" format.
 *
 *  \param[in] handle Device handle.
 *  \param[out] pTime Pointer to struct tm variable.
 *  \retval LPCLIB_SUCCESS Ok
 *  \retval LPCLIB_BUSY RTC returns inconsistent values.
 *  \retval LPCLIB_ILLEGAL_PARAMETER Invalid parameter (e.g. NULL pointer)
 */
LPCLIB_Result RTC_readStructTm (RTC_Handle handle, struct RTC_TimeStructTm *pTime);


/** Read time of day.
 *
 *  The returned time is consistent (instant snapshot), but has not been checked
 *  for validity (hours = 42 would remain undetected...)
 *
 *  \param[in] handle Device handle.
 *  \param[out] pTime Pointer to time variable.
 *  \retval LPCLIB_SUCCESS Ok
 *  \retval LPCLIB_ILLEGAL_PARAMETER Invalid parameter (e.g. NULL pointer)
 */
LPCLIB_Result RTC_readTimeOfDay (RTC_Handle handle, RTC_TimeOfDay *pTime);


/** Read date.
 *
 *  \param[in] handle Device handle.
 *  \param[out] pDate Pointer to date variable.
 *  \retval LPCLIB_SUCCESS Ok
 *  \retval LPCLIB_ILLEGAL_PARAMETER Invalid parameter (e.g. NULL pointer)
 */
LPCLIB_Result RTC_readDate (RTC_Handle handle, RTC_Date *pDate);


/** @} RTC API Functions */

/** @} RTC */

#endif /* #ifndef __LPC17XX_RTC_H__ */

